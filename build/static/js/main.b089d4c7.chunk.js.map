{"version":3,"sources":["To-Do-List-Hook.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListHook","useState","number","setNumber","addNumber","e","a","target","value","task","setTask","task2","setTask2","items","SetItems","endpoint","handleSubmit","preventDefault","console","log","axios","post","headers","then","res","getTask","useEffect","get","data","map","item","color","style","wordWrap","status","settonumber","parseFloat","Card","fluid","Content","Header","textAlign","test","ttt","subtest","substring","Meta","Icon","name","onClick","addSubTask","_id","paddingRight","updateTask","undoTask","deleteTask","id","put","delete","className","as","Form","onSubmit","Input","type","onChange","event","placeholder","Group","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b089d4c7.chunk.js","sourcesContent":["import React, {Component, useEffect, useState} from 'react'\nimport axios from 'axios'\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\nimport \"normalize.css\"\nexport default function ToDoListHook(){\n    const [number,setNumber] = useState('')\n    const addNumber = async (e) =>{\n      setNumber(e.target.value)\n    }\n    \n\n    \n  \n    const [task,setTask] = useState('')\n    const [task2,setTask2] = useState('')\n    //const [task,setTask] = useState({})\n    const [items,SetItems] = useState([])\n    let endpoint = \"http://localhost:8090\"\n    const handleChange = (event) => {\n        setTask(event.target.value)\n    }\n    const handleChange2 = (event) => {\n      setTask2(event.target.value)\n    }    \n    const handleSubmit = async (e) => {\n        // let { task } = this.state;\n        // console.log(\"pRINTING task\", this.state.task);\n        e.preventDefault()\n        if (task) {\n          console.log(\"Has task\")\n        await axios\n            .post(\n              endpoint + \"/api/task\",\n              {\n                \n                //userObject\n                task:task,\n                task2:task2,\n                number:number,\n              },\n              {\n                headers: {\n                  \"Content-Type\": \"application/x-www-form-urlencoded\",\n                },\n              }\n            )\n            .then((res) => {\n              console.log(\"Just test\")\n              console.log(res);\n              getTask();\n              setTask(\"\")\n              setTask2(\"\")\n              setNumber(\"\")\n            });\n        }\n    };\n    useEffect(()=>{\n        getTask();\n    })\n    const getTask = async () => {\n        await axios.get(endpoint + \"/api/task\").then((res)=>{\n            if(res.data){\n                //console.log(\"Can show res.data: \",res.data)\n                SetItems(res.data.map((item)=>{\n                    let color = \"yellow\"\n                    let style = {\n                        wordWrap: \"break-word\",\n                    };\n                    if(item.status){\n                        color = \"green\"\n                        style[\"textDecorationLine\"] = \"line-through\";\n                    }\n                    let settonumber = parseFloat(item.number)\n                    return (\n                        <Card key={item._id} color={color} fluid>\n                          <Card.Content>\n                            <Card.Header textAlign=\"left\">\n                              <div style={style}>{item.test}</div>\n                              <div style={style}>{item.ttt}</div>\n                              <div style={style}>{settonumber}</div>\n                              {item.subtest ? \n                              <div style={style}>{item.subtest[0].substring}</div>\n                              :<div style={style}></div>\n                              \n                            }\n                            </Card.Header>\n          \n                            <Card.Meta textAlign=\"right\">\n                              <Icon \n                                name=\"cloud download\"\n                                color=\"brown\"\n                                onClick={()=>addSubTask(item._id)}\n                              />\n                              <span style={{ paddingRight: 10}}>Add</span>\n                              <Icon\n                                name=\"check circle\"\n                                color=\"green\"\n                                onClick={() => updateTask(item._id)}\n                              />\n                              <span style={{ paddingRight: 10 }}>Done</span>\n                              <Icon\n                                name=\"undo\"\n                                color=\"yellow\"\n                                onClick={() => undoTask(item._id)}\n                              />\n                              <span style={{ paddingRight: 10 }}>Undo</span>\n                              <Icon\n                                name=\"delete\"\n                                color=\"red\"\n                                onClick={() => deleteTask(item._id)}\n                              />\n                              <span style={{ paddingRight: 10 }}>Delete</span>\n                            </Card.Meta>\n                          </Card.Content>\n                        </Card>\n                      );\n                }))\n            }else{\n                SetItems([]);\n            }\n        })\n    }\n\n    \n    const updateTask = async (id) => {\n        await axios\n            .put(endpoint + \"/api/doneTask/\" + id, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                },\n            })\n            .then((res)=>{\n                console.log(res);\n                getTask();\n            })\n    }\n\n    const undoTask = async (id) => {\n        await axios\n          .put(endpoint + \"/api/undoTask/\" + id, {\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n          })\n          .then((res) => {\n            console.log(res);\n            getTask();\n          });\n    };\n    const addSubTask = async (id) => {\n      console.log(\"id: \",id);\n      await axios\n        .post(endpoint + \"/api/task/\" + id,{\n          headers: {\n            \"Content-Type\": \"applicaton/x-www-form-urlencoded\",\n          },\n        })\n        .then((res) => {\n          console.log(res)\n          getTask();\n        }) \n    }\n    const deleteTask = async (id) => {\n        await axios\n          .delete(endpoint + \"/api/deleteTask/\" + id, {\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n          })\n          .then((res) => {\n            console.log(res);\n            getTask();\n          });\n    };\n\n    \n    return (\n        <div>\n        <div className=\"row\">\n          <Header className=\"header\" as=\"h2\">\n            TO DO LIST\n          </Header>\n        </div>\n        <div className=\"row\">\n          <Form onSubmit={handleSubmit}>\n            <div> \n            <Input\n              type=\"text\"\n              name=\"task\"\n              onChange={handleChange}\n              value={task}\n              fluid\n              placeholder=\"Create Task\"\n            />\n            </div>\n            <div>\n              <Input\n                type=\"text\"\n                name=\"task\"\n                onChange={handleChange2}\n                value={task2}\n                fluid\n                placeholder=\"\"\n              />\n            </div>\n            <div>\n              <Input\n                type=\"text\"\n                name=\"number\"\n                onChange={addNumber}\n                value={number}\n                fluid\n                placeholder=\"\"\n              />\n            </div>\n            \n            <div>\n              <input type=\"submit\" value=\"Submit\"/>\n            </div>\n            {/* <Button >Create Task</Button> */}\n          </Form>\n          \n        </div>\n        \n        <div className=\"row\">\n          <Card.Group>{items}</Card.Group>\n        </div>\n      </div>\n    )\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\n//import ToDoList from \"./To-Do-List\";\nimport ToDoList from \"./To-Do-List-Hook\";\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <ToDoList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}